{"version":3,"sources":["comp/Home.js","App.js","index.js"],"names":["Homee","useState","alpha","symbol","integerVal","query","setQuery","numOfResult","resultDatas","error","resultVal","setResultVal","buttons","setButtons","alphabet","split","dragStart","e","dataTransfer","setData","target","id","effectAllowed","intDblClick","intVal","prompt","innerText","parseInt","crossClick","newState","splice","findIndex","j","onSubmit","a","fetch","process","res","json","data","arr","map","value","push","length","window","scrollTo","top","behavior","className","i","draggable","onDragStart","onClick","onDragOver","preventDefault","dropEffect","onDrop","getData","nodeCopy","document","getElementById","cloneNode","includes","prev","classList","add","Array","isArray","onDoubleClick","key","App","exact","path","component","Home","ReactDOM","render"],"mappings":"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","file":"static/js/main.ef8b8e52.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport '../css/home.scss'\r\n\r\nexport default function Homee() {\r\n   const [query,setQuery] = useState({\r\n     alpha : '',\r\n     symbol : '',\r\n     integerVal : null\r\n   })\r\n   const {alpha,symbol,integerVal} = query\r\n   const [resultVal,setResultVal] = useState({\r\n     numOfResult: null,\r\n     resultDatas : [],\r\n     error: ''\r\n   })\r\n   const {numOfResult,resultDatas,error} = resultVal\r\n   const [buttons,setButtons] = useState([])\r\n\r\n    let alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('')\r\n   \r\n const dragStart=(e)=>{\r\n     \r\n        e.dataTransfer.setData(\"text\",e.target.id)\r\n         e.dataTransfer.effectAllowed = 'copy';\r\n  }\r\n  const dragOver =(e)=>{\r\n       e.preventDefault()\r\n       e.dataTransfer.dropEffect = 'copy'\r\n  }\r\n  const onDrop =(e)=>{\r\n  \r\n      e.preventDefault()\r\n   let data=  e.dataTransfer.getData(\"text\")\r\n     let nodeCopy = document.getElementById(data).cloneNode(true);\r\n     nodeCopy.id = \"newId\"; \r\n       \r\nif(buttons.length < 3){\r\n       if(alphabet.includes(nodeCopy.innerText)){\r\n         setQuery({\r\n           ...query,alpha: nodeCopy.innerText\r\n         })\r\n         setButtons(prev=>(\r\n             [...prev,nodeCopy.innerText]\r\n         ))\r\n       }else if(nodeCopy.innerText === 'INT'){\r\n        nodeCopy.classList.add('green')\r\n        setButtons(prev=>(\r\n            [...prev,'INT']\r\n        ))\r\n         \r\n        //  nodeCopy.setAttribute(\"ref\",\"intRef\")\r\n        //  nodeCopy.innerText = '_'\r\n       }else if(nodeCopy.innerText === '>'){\r\n         nodeCopy.classList.add('orange')\r\n         setQuery({\r\n           ...query,symbol:'greater_than'\r\n         })\r\n         setButtons(prev=>(\r\n            [...prev,'GRT']\r\n        ))\r\n       }else if(nodeCopy.innerText === '<'){\r\n        nodeCopy.classList.add('orange')\r\n        setQuery({\r\n          ...query,symbol:'less_than'\r\n        })\r\n        setButtons(prev=>(\r\n            [...prev,'LT']\r\n        ))\r\n       }\r\n      }\r\n    //    e.target.appendChild(nodeCopy)\r\n  }\r\n\r\n    const intDblClick =(e)=>{\r\n       \r\n        let intVal = prompt('Please Enter a Integer')\r\n        if(intVal !== ''){\r\n            e.target.innerText = parseInt(intVal,10)\r\n            setQuery({\r\n              ...query,integerVal:parseInt(intVal,10)\r\n            })\r\n        }else{\r\n            return\r\n        } \r\n    }\r\n    const crossClick =(e)=>{      \r\n      \r\n          let newState = [...buttons]     \r\n       \r\n   newState.splice(newState.findIndex(j=>j === e),1)\r\n   setButtons(newState)\r\n   \r\n   if(e === 'INT'){\r\n     setQuery({\r\n       ...query,integerVal : null\r\n     })\r\n   }else if(e === 'GRT' || e === 'LT'){\r\n     setQuery({\r\n       ...query,symbol:''\r\n     })\r\n   }else{\r\n     setQuery({\r\n       ...query,alpha:''\r\n     })\r\n   }\r\n\r\n\r\n    }\r\n\r\n    const onSubmit =async ()=>{\r\n    \r\n     if(alpha && symbol && integerVal){  \r\n      let res = await fetch(`${process.env.REACT_APP_API_URL}/api/key/?q=${alpha}`)\r\n      let data = await res.json()\r\n      \r\n      let arr = []\r\n  if(symbol === 'greater_than'){   \r\n        data.map(e=>{\r\n         if(e.value > integerVal){\r\n         \r\n            return arr.push(e)\r\n            \r\n         }else{\r\n           return null\r\n         }\r\n       })\r\n      }else{\r\n        data.map(e=>{\r\n          if(e.value < integerVal){\r\n             \r\n           return  arr.push(e)\r\n            \r\n          }else{\r\n            return null\r\n          }\r\n        })\r\n      }\r\n\r\nsetResultVal({\r\n  numOfResult : arr.length,\r\n  resultDatas : arr\r\n})\r\n   \r\n     }else{\r\n      \r\n       setResultVal({\r\n         ...resultVal,error:'Not Valid query'\r\n       })\r\n     }\r\n     window.scrollTo({\r\n      top:300,\r\n      behavior:'smooth'\r\n    })\r\n    }\r\n    return (\r\n        <>\r\n          <div className=\"container\">\r\n              <section className='alphaBets'>\r\n                <div className=\"alphaDiv\">\r\n                    <div className=\"scrollDiv\">\r\n                  {alphabet.map((j,i)=>(\r\n                     <button key={i} \r\n                             id={'btn'+ i}\r\n                             draggable='true'\r\n                             onDragStart={dragStart} >{j}</button>\r\n                  )        \r\n                  )}\r\n                   </div>\r\n                </div>\r\n                <div className=\"arrowInt\">\r\n                    <div className=\"arrowsDiv\">\r\n                        <button draggable='true'\r\n                                id='gt'\r\n                                onDragStart={dragStart}>&gt;</button>\r\n                        <button id='lt' draggable onDragStart={dragStart}>&lt;</button>\r\n                    </div>\r\n                    <div className=\"intDiv\">\r\n                      <button draggable onDragStart={dragStart} id='int'>INT</button>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div className=\"submitDiv\">\r\n                      <button onClick={onSubmit} id='submt'>Submit</button>\r\n                    </div>\r\n              </section>\r\n              <section className='dragSec'>\r\n        <h4>Drag element here</h4>\r\n        <div  className=\"dragDiv\"\r\n              onDragOver={dragOver}\r\n               onDrop={onDrop}>\r\n                   {Array.isArray(buttons) && buttons.length ? ( buttons.map((e,i)=>{\r\n                      if(alphabet.includes(e)){\r\n                          return (<div key={i} className=\"btnbox\">\r\n                             <button >{e}</button>\r\n                             <span onClick={()=>crossClick(e)}>&#10005;</span>\r\n                          </div> \r\n                          \r\n                          )\r\n                      }else if(e === 'INT'){\r\n                          return (\r\n                            <div key={i} className=\"btnbox\">\r\n                            <button  onDoubleClick={intDblClick} className='green'>_</button>\r\n                            <span onClick={()=>crossClick(e)}>&#10005;</span>\r\n                         </div> \r\n                          )\r\n                           \r\n                      }else if(e === 'GRT'){\r\n                          return (\r\n                            <div key={i} className=\"btnbox\">\r\n                            <button  className='orange'>&gt;</button>\r\n                            <span onClick={()=>crossClick(e)}>&#10005;</span>\r\n                         </div> \r\n                          )\r\n                           \r\n                      }else if(e === 'LT'){\r\n                          return (\r\n                            <div key={i} className=\"btnbox\">\r\n                            <button  className='orange'>&lt;</button>\r\n                            <span onClick={()=>crossClick(e)}>&#10005;</span>\r\n                         </div> \r\n                          )\r\n                           \r\n                      }else{return <div></div>}\r\n                      \r\n                      \r\n                  })\r\n                   ) : (<div></div>)\r\n                }\r\n\r\n        </div>\r\n              </section>\r\n\r\n              <section className='result'>\r\n                  <h1>Result</h1>\r\n                  <div className=\"resultDiv\">\r\n                 { !error ? (<p>{numOfResult} query found</p>): ('')}\r\n                    <div className=\"resultShow\">\r\n                         {numOfResult  ? (\r\n                         \r\n                           \r\n                           \r\n                           resultDatas.map((e,i)=>(\r\n                           \r\n                             \r\n                             <p key={i}>{e.key} : {e.value}</p>\r\n\r\n                            \r\n                           ))\r\n                       \r\n                         ):(error ? (<h2>{error}</h2>):(<div></div>))}\r\n                    </div>\r\n                  </div>\r\n              </section>\r\n          </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\nimport {BrowserRouter as Router,Route,Switch} from 'react-router-dom'\nimport Home from './comp/Home'\n\n\nconst App =()=>(\n     <Router>\n        <Switch>\n          <Route exact path='/' component={Home} />\n        </Switch>  \n      </Router>\n)\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n\n    <App />\n ,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}